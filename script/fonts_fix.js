/* 初始化字体库 
 * type为字体信息 same 是等宽， yahei 是雅黑， tahoma 是tahoma
 * 等宽的为：比如宋体黑体GB2312这些，宋体一家（仿宋新宋）都等宽的
 * 雅黑为win7，或者xp修改字体，或者mac下的默认字体
 * tahoma（它后妈）看起来就是改版的xp主题里用这个
 */

function Fonts_fix(type){
	this.font_type = type || "none"; //它可以空赋值 - [[Js 或]]

	/* 工厂原料-字体宽度
	 * 这里储存字体相关的信息， 等宽体直接返回真实长度就行 -- 小约子
	 * 无法照顾到所有的字体 - 这很恐怖，但是还是疯狂的去做了 -- 小约子
	 * 我们有了新的水手制造它们，这不再是一个需要担心的麻烦了  -- 船长
	 */

	this.fonts_width = {}; //初始化个玩意

	//字符信息主要为英文，和符号ascii(33)-ascii(126),共计93个字符

	/* 森亮号宽度码水手生产线生产完毕 */
	/* 当前生产线使用了原料字体：微软雅黑，原料字体大小：12 */
	this.fonts_width['yahei']={'yue': 14, ' ': 5, '!': 5, '\"': 7, '#': 10, '$': 9, '%': 14, '&': 14, '\'': 4, '(': 5, ')': 5, '*': 7, '+': 12, ',': 4, '-': 7, '.': 4, '/': 7, '0': 9, '1': 9, '2': 9, '3': 9, '4': 9, '5': 9, '6': 9, '7': 9, '8': 9, '9': 9, ':': 4, ';': 4, '<': 12, '=': 12, '>': 12, '?': 8, '@': 17, 'A': 11, 'B': 10, 'C': 11, 'D': 12, 'E': 9, 'F': 9, 'G': 12, 'H': 12, 'I': 5, 'J': 6, 'K': 10, 'L': 8, 'M': 16, 'N': 13, 'O': 13, 'P': 10, 'Q': 13, 'R': 10, 'S': 9, 'T': 9, 'U': 12, 'V': 11, 'W': 16, 'X': 10, 'Y': 10, 'Z': 10, '[': 5, '\\': 7, ']': 5, '^': 12, '_': 7, '`': 5, 'a': 9, 'b': 10, 'c': 8, 'd': 10, 'e': 9, 'f': 6, 'g': 10, 'h': 10, 'i': 4, 'j': 4, 'k': 9, 'l': 4, 'm': 15, 'n': 10, 'o': 10, 'p': 10, 'q': 10, 'r': 6, 's': 7, 't': 6, 'u': 10, 'v': 8, 'w': 13, 'x': 8, 'y': 8, 'z': 8, '{': 5, '|': 4, '}': 5, '~': 12}

	/* 森亮号宽度码水手生产线生产完毕 */
	/* 当前生产线使用了原料字体：宋体，原料字体大小：12 */
	this.fonts_width['songti']={'yue': 16, ' ': 8, '!': 8, '\"': 8, '#': 8, '$': 8, '%': 8, '&': 8, '\'': 8, '(': 8, ')': 8, '*': 8, '+': 8, ',': 8, '-': 8, '.': 8, '/': 8, '0': 8, '1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8, '7': 8, '8': 8, '9': 8, ':': 8, ';': 8, '<': 8, '=': 8, '>': 8, '?': 8, '@': 8, 'A': 8, 'B': 8, 'C': 8, 'D': 8, 'E': 8, 'F': 8, 'G': 8, 'H': 8, 'I': 8, 'J': 8, 'K': 8, 'L': 8, 'M': 8, 'N': 8, 'O': 8, 'P': 8, 'Q': 8, 'R': 8, 'S': 8, 'T': 8, 'U': 8, 'V': 8, 'W': 8, 'X': 8, 'Y': 8, 'Z': 8, '[': 8, '\\': 8, ']': 8, '^': 8, '_': 8, '`': 8, 'a': 8, 'b': 8, 'c': 8, 'd': 8, 'e': 8, 'f': 8, 'g': 8, 'h': 8, 'i': 8, 'j': 8, 'k': 8, 'l': 8, 'm': 8, 'n': 8, 'o': 8, 'p': 8, 'q': 8, 'r': 8, 's': 8, 't': 8, 'u': 8, 'v': 8, 'w': 8, 'x': 8, 'y': 8, 'z': 8, '{': 8, '|': 8, '}': 8, '~': 8}

	/* 森亮号宽度码水手生产线生产完毕 */
	/* 当前生产线使用了原料字体：Tahoma，原料字体大小：12 */
	this.fonts_width['tahoma']={'yue': 16, ' ': 5, '!': 4, '\"': 6, '#': 12, '$': 9, '%': 16, '&': 11, '\'': 3, '(': 6, ')': 6, '*': 9, '+': 12, ',': 5, '-': 6, '.': 5, '/': 6, '0': 9, '1': 9, '2': 9, '3': 9, '4': 9, '5': 9, '6': 9, '7': 9, '8': 9, '9': 9, ':': 6, ';': 6, '<': 12, '=': 12, '>': 12, '?': 8, '@': 15, 'A': 11, 'B': 9, 'C': 10, 'D': 11, 'E': 9, 'F': 8, 'G': 11, 'H': 11, 'I': 6, 'J': 7, 'K': 9, 'L': 8, 'M': 12, 'N': 11, 'O': 12, 'P': 9, 'Q': 12, 'R': 10, 'S': 9, 'T': 10, 'U': 11, 'V': 10, 'W': 14, 'X': 9, 'Y': 10, 'Z': 9, '[': 6, '\\': 6, ']': 6, '^': 12, '_': 9, '`': 9, 'a': 8, 'b': 9, 'c': 7, 'd': 9, 'e': 8, 'f': 5, 'g': 9, 'h': 9, 'i': 4, 'j': 5, 'k': 8, 'l': 4, 'm': 14, 'n': 9, 'o': 9, 'p': 9, 'q': 9, 'r': 6, 's': 7, 't': 5, 'u': 9, 'v': 8, 'w': 12, 'x': 8, 'y': 8, 'z': 7, '{': 8, '|': 6, '}': 8, '~': 12}
	
	//字体修补
	this.fonts_width["tahoma"]["patch_fix_ch"] = 2.5; //tahoma的中文修补间隙，它是宋体和tahoma的空隙差值，但看起来并不是空格差

}

// 好了好了，差不多了，工厂原料准备完毕

/* 开始聘请工厂里的所有工人
 * 包括len和fix两个最老的工人
 * len是占星师，为人老实，喜欢看对方长得是不是正义
 * fix是战士，喜欢对看起来不正经的人进行修理，给它穿衣服裤子
 * 哦，还有set，它负责设置
 */
Fonts_fix.prototype = {
	/* 占星师len
	 *  它擅长占卜包含空格的长度 
	 * 返回宽度码
	 */
    len: function(str) {
		var space_length;
        str = str.replace(/<\/?match>/g, "");//处理match标签，在这里
		str = str.replace(/<\/?url>/g, "");//处理url标签
		str = str.replace(/<\/?dim>/g, "");//处理dim标签
		
		var last_type_ch = false;//上一次是汉字的标记
        var space_len = 0; //最终返回长度
        if (this.font_type == "yahei" || this.font_type == "tahoma") {
			var fonts_name = this.font_type;
			var fonts_len = 0; //原始长度
			space_length = this.fonts_width[fonts_name][' '];
            for (var index = 0; index < str.length; index++) {
				//汉字叠加
				if (!this.fonts_width[fonts_name][str[index]]) //中文字符
				{ //无长度
					fonts_len+= this.fonts_width[fonts_name]['yue']; //额外加3长度在后面
					if (fonts_name=="tahoma")
					{
						fonts_len+= this.fonts_width["tahoma"]["patch_fix_ch"]; //tahoma没有自己的中文渲染，用宋体的差值
						if (!last_type_ch)
						{
							//上一次非汉字，或许处理并无比啊哟
							//fonts_len+= 3; //再分点空格
						}
					}
					last_type_ch = true; //记载汉字
				}else{ //存在长度
	                fonts_len += this.fonts_width[fonts_name][str[index]]; //是的 - 雅黑汉字从yue获取 空格从' '得到 要的只是最终的一个倍数
					last_type_ch = false; //记载非汉字
				}
            }
            space_len = Math.round(fonts_len / space_length); //四舍五入算出这玩意
        } else { //别的？都当一样的处理去
            space_len = str.match(/[^ -~]/g) == null ? str.length: str.length + str.match(/[^ -~]/g).length; //等宽字体?
        }
        return space_len;
    },

    /* 战士fix，修理那些不爱穿戴的家伙
	 * 把字符串加上空格
	 * 是的看起来很困难 但是完成了
	 * 返回这个字符串
	 */
    fix: function(str, blanks) {
		var need_long = blanks - this.len(str);
        for (var i = 0; i < need_long; i++) {
            str += " "; //是的很笨 - 但是我不知道怎么做
        }
        return str;
    },
	/* 设置字体类型
	 * 设置者
	 */
	set: function(type){
		this.font_type = type; 
	},
	
	/* 返回是否开启了
	 * 返回真是开启了
	 * 返回假是字体无效设置
	 */
	iswork: function(){
		return (this.font_type != "none"); //不是无字体
	}
	

} //方法封装完毕
